// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Marketplace {
    address public owner;
    struct Product {
        string name;
        uint256 price;
        address payable seller;
        bool isSold;
    }

    mapping(uint256 => Product)public products;
    uint256 public productCount;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner"); 
        _;
    }

    function addProduct(string memory _name, uint256 _price) public {
        require(_price > 0, "Price must be greater than zero"); // Product only added if price greater than 0
        productCount += 1;
        products[productCount] = Product(_name, _price, payable(msg.sender), false);
    }

    function buyProduct(uint256 _productId) public payable {
        Product storage product = products[_productId];
        require(product.price == msg.value, "Incorrect value sent"); // check the price marked correctly for buying
        require(!product.isSold, "Product already sold");
        
        product.isSold = true;
        product.seller.transfer(msg.value);
        
        assert(product.isSold == true); //verify that the product is indeed marked as sold.
    }

    function removeProduct(uint256 _productId) public onlyOwner {
        if (products[_productId].isSold) {
            revert("Cannot remove sold product"); // to check sold products are  not removed 
        }
        delete products[_productId];
    }
}
